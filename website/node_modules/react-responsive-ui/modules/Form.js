import _getIterator from 'babel-runtime/core-js/get-iterator';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

import Button from './Button';

// Prevents `<form/> submission when `busy` is `true`.
// And also inserts `<Form.Error/>` when `error` is passed.
// Using `Component` here instead of `PureComponent`
// because `<Form.Actions>` depends on `context` and therefore
// should be rerendered even if the `props` haven't changed.
// And probably that was also why it would keep displaying an old error
// (and not resetting it for some reason).

var Form = function (_Component) {
	_inherits(Form, _Component);

	function Form() {
		_classCallCheck(this, Form);

		var _this = _possibleConstructorReturn(this, (Form.__proto__ || _Object$getPrototypeOf(Form)).call(this));

		_this.submit = _this.submit.bind(_this);
		_this.on_key_down = _this.on_key_down.bind(_this);
		return _this;
	}

	_createClass(Form, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    post = _props.post,
			    error = _props.error,
			    className = _props.className,
			    style = _props.style;


			var markup = React.createElement(
				'form',
				{
					onSubmit: this.submit,
					onKeyDown: this.on_key_down,
					action: post,
					method: 'POST',
					className: classNames('rrui__form', className),
					style: style,
					noValidate: true },
				this.render_children(error)
			);

			return markup;
		}

		// Adds `error` element to the form

	}, {
		key: 'render_children',
		value: function render_children(error) {
			var children = this.props.children;


			var form_elements = React.Children.toArray(children);

			// Insert `error` element
			if (error) {
				// Will be set to `null` upon insertion
				var error_element = React.createElement(
					Form.Error,
					{ key: 'form-error' },
					error
				);

				// Show form error above form actions,
				// so that the error will be visible and won't be overlooked.
				var index = 0;
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = _getIterator(form_elements), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var child = _step.value;

						if (child.type === Form.Error) {
							form_elements[index] = React.cloneElement(child, { key: 'form-error' }, error);
							error_element = null;
							break;
						}

						if (child.type === Form.Actions) {
							form_elements.insert_at(index, error_element);
							error_element = null;
							break;
						}

						index++;
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}

				if (error_element) {
					form_elements.push(error_element);
				}
			}

			return form_elements;
		}
	}, {
		key: 'submit',
		value: function submit(event) {
			if (event) {
				event.preventDefault();
			}

			var _props2 = this.props,
			    busy = _props2.busy,
			    submit = _props2.submit;

			// Prevent form double submit
			// (because not only buttons submit a form,
			//  therefore just disabling buttons is not enough).

			if (busy) {
				return;
			}

			if (submit) {
				return submit();
			}
		}
	}, {
		key: 'on_key_down',
		value: function on_key_down(event) {
			// Cancel editing on "Escape" key
			if (event.keyCode === 27) {
				var cancel = this.props.cancel;


				if (cancel) {
					cancel();
				}

				event.preventDefault();
			}
		}
	}]);

	return Form;
}(Component);

Form.propTypes = {
	// `onSubmit` handler
	submit: PropTypes.func,

	// On `Escape` keydown handler
	cancel: PropTypes.func,

	// `error` can be passed for non-javascript old-school forms.
	// e.g. when a form submitted via HTTP POST request had an error,
	// then this error is rendered as part of the form.
	error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.node]),

	// The HTML form `action` attribute,
	// i.e. the URL to which the form will be posted
	// in case of a non-javascript old-school POST submission.
	post: PropTypes.string,

	// Is form submission in progress
	busy: PropTypes.bool.isRequired,

	// CSS class
	className: PropTypes.string,

	// CSS style object
	style: PropTypes.object
};
Form.defaultProps = {
	busy: false
};
export default Form;


Form.Error = function (_ref) {
	var children = _ref.children;

	return React.createElement(
		'div',
		{ className: 'rrui__form__error' },
		children
	);
};

// Using `Component` here instead of `PureComponent`
// because it depends on `context` and therefore should be
// rerendered even if the `props` haven't changed.
Form.Actions = function (_Component2) {
	_inherits(Actions, _Component2);

	function Actions() {
		_classCallCheck(this, Actions);

		return _possibleConstructorReturn(this, (Actions.__proto__ || _Object$getPrototypeOf(Actions)).apply(this, arguments));
	}

	_createClass(Actions, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			var rrui__modal = this.context.rrui__modal;


			if (rrui__modal) {
				rrui__modal.register_form();
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var rrui__modal = this.context.rrui__modal;


			if (rrui__modal) {
				rrui__modal.unregister_form();
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _props3 = this.props,
			    children = _props3.children,
			    className = _props3.className,
			    style = _props3.style;
			var rrui__modal = this.context.rrui__modal;


			return React.createElement(
				'div',
				{
					className: classNames('rrui__form__actions', className),
					style: style },
				rrui__modal && React.createElement(
					Button,
					{ action: rrui__modal.close_if_not_busy },
					rrui__modal.closeLabel
				),
				children
			);
		}
	}]);

	return Actions;
}(Component);

Form.Actions.contextTypes = {
	rrui__modal: PropTypes.object
};
//# sourceMappingURL=Form.js.map