import _extends from 'babel-runtime/helpers/extends';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import classNames from 'classnames';

import ActivityIndicator from './ActivityIndicator';

var Button = function (_PureComponent) {
	_inherits(Button, _PureComponent);

	function Button() {
		_classCallCheck(this, Button);

		var _this = _possibleConstructorReturn(this, (Button.__proto__ || _Object$getPrototypeOf(Button)).call(this));

		_this.link_on_click = _this.link_on_click.bind(_this);
		_this.button_on_click = _this.button_on_click.bind(_this);
		return _this;
	}

	_createClass(Button, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    disabled = _props.disabled,
			    busy = _props.busy,
			    submit = _props.submit,
			    title = _props.title,
			    stretch = _props.stretch,
			    style = _props.style,
			    className = _props.className;


			var markup = React.createElement(
				'div',
				{
					className: classNames('rrui__input', 'rrui__button', {
						'rrui__button--busy': busy,
						'rrui__button--disabled': disabled,
						'rrui__button--stretch': stretch
					}, className),
					style: style },
				React.createElement(ActivityIndicator, {
					className: classNames('rrui__button__activity-indicator', {
						// CSS selector performance optimization
						'rrui__button__activity-indicator--busy': busy
					}) }),
				this.render_button()
			);

			return markup;
		}
	}, {
		key: 'render_button',
		value: function render_button() {
			var _this2 = this;

			var _props2 = this.props,
			    link = _props2.link,
			    linkDownload = _props2.linkDownload,
			    title = _props2.title,
			    busy = _props2.busy,
			    disabled = _props2.disabled,
			    submit = _props2.submit,
			    buttonStyle = _props2.buttonStyle,
			    children = _props2.children;


			var className = classNames('rrui__button__button', {
				'rrui__button__button--link': link,
				// CSS selector performance optimization
				'rrui__button__button--busy': busy,
				'rrui__button__button--disabled': disabled
			});

			var properties = {
				ref: function ref(_ref) {
					return _this2.button = _ref;
				},
				title: title,
				className: className,
				style: buttonStyle
			};

			var contents = React.createElement(
				'div',
				{
					className: classNames('rrui__button__contents', {
						// CSS selector performance optimization
						'rrui__button__contents--busy': busy
					}) },
				children
			);

			if (link) {
				var _markup = React.createElement(
					'a',
					_extends({
						href: link,
						download: linkDownload,
						onClick: this.link_on_click
					}, properties),
					contents
				);

				return _markup;
			}

			var markup = React.createElement(
				'button',
				_extends({
					type: submit ? 'submit' : 'button',
					disabled: busy || disabled,
					onClick: this.button_on_click
				}, properties),
				contents
			);

			return markup;
		}
	}, {
		key: 'focus',
		value: function focus() {
			ReactDOM.findDOMNode(this.button).focus();
		}
	}, {
		key: 'link_on_click',
		value: function link_on_click(event) {
			var _props3 = this.props,
			    busy = _props3.busy,
			    disabled = _props3.disabled,
			    action = _props3.action;

			// Only handle left mouse button clicks
			// ignoring those ones with a modifier key pressed

			if (event.button !== 0 || event.shiftKey || event.altKey || event.ctrlKey || event.metaKey) {
				return;
			}

			if (busy || disabled) {
				return;
			}

			// Could be just a "submit" button without having any `action`.
			// Could also be just a `link` button.
			// Therefore "preventing default" only if `action` is set:
			// for example, if `link` is set and no `action`
			// then it should proceed with navigating to the `link`.
			// And if `link` is set and `action` is specified too
			// then it will prevent it from navigating to the `link`.
			if (action) {
				event.preventDefault();
				action();
			}
		}
	}, {
		key: 'button_on_click',
		value: function button_on_click(event) {
			var action = this.props.action;

			// Could be just a "submit" button

			if (action) {
				action();
			}
		}
	}]);

	return Button;
}(PureComponent);

Button.propTypes = {
	// onClick handler
	action: PropTypes.func,

	// If `busy` is `true` then the button
	// will be disabled and a spinner will be shown.
	busy: PropTypes.bool,

	// Disables the button
	disabled: PropTypes.bool,

	// When `true`, the button will submit an enclosing form.
	submit: PropTypes.bool,

	// If `link` is set, then the button is gonna be an <a/> tag.
	link: PropTypes.string,

	// `<a download="..."/>` HTML attribute
	linkDownload: PropTypes.string,

	// HTML `title` attribute
	title: PropTypes.string,

	// Set to `true` to stretch the button to full width
	stretch: PropTypes.bool.isRequired,

	// CSS class name
	className: PropTypes.string,

	// CSS style object for the button container
	style: PropTypes.object,

	// CSS style object for the button itself
	buttonStyle: PropTypes.object
};
Button.defaultProps = {
	// Set to `true` to stretch the button to full width
	stretch: false
};
export default Button;
//# sourceMappingURL=Button.js.map