export { CanDrop };
import HTML5Backend, { NativeTypes } from 'react-dnd-html5-backend';
import { DragDropContext, DragLayer, DropTarget } from 'react-dnd';

// Usage:
//
// import { DragAndDrop, CanDrop, FILE, FILES } from 'react-responsive-ui'
//
// @DragAndDrop()
// class Application extends Component {
// 	render() {
// 		const { isDragging, children } = this.props
// 		return <div>{ children }</div>
// 	}
// }
//
// @CanDrop(FILE, (props, dropped, component) => alert('Uploading file'))
// class FileDropArea extends Component {
// 	render() {
// 		const { dropTarget, draggedOver, canDrop } = this.props
// 		return dropTarget(<div>Drop files here</div>)
// 	}
// }

// Decorate the droppable area component with this decorator
function CanDrop(type, _drop) {
	if (!type) {
		throw new Error('Provide a `type` for `@CanDrop()` decorator');
	}

	return DropTarget(get_react_dnd_type(type), {
		drop: function drop(props, monitor, component) {
			return _drop(props, get_dropped_object(monitor, type), component);
		}

	}, function (connect, monitor) {
		return {
			dropTarget: connect.dropTarget(),
			draggedOver: monitor.isOver(),
			canDrop: monitor.canDrop()
		};
	});
}

// Decorate the root React application component with this decorator
export function DragAndDrop() {
	var context = DragDropContext(HTML5Backend);

	var layer = DragLayer(function (monitor) {
		return {
			isDragging: monitor.isDragging()
		};
	});

	return function (component) {
		return context(layer(component));
	};
}

// Native file drag'n'drop (single file)
export var File = 'File';

// Native file drag'n'drop (multiple files)
export var Files = 'Files';

// Gets the corresponding `react-dnd` type
// for a given droppable object type
function get_react_dnd_type(type) {
	switch (type) {
		case File:
		case Files:
			return NativeTypes.FILE;
		default:
			return type;
	}
}

// Gets the dropped object from `monitor`
function get_dropped_object(monitor, type) {
	var dropped = monitor.getItem();

	switch (type) {
		case File:
			return dropped.files[0];
		case Files:
			return dropped.files;
		default:
			return dropped;
	}
}
//# sourceMappingURL=DragAndDrop.js.map