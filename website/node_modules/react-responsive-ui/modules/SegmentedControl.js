import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import classNames from 'classnames';

var Segmented_control = function (_PureComponent) {
	_inherits(Segmented_control, _PureComponent);

	function Segmented_control() {
		_classCallCheck(this, Segmented_control);

		var _this = _possibleConstructorReturn(this, (Segmented_control.__proto__ || _Object$getPrototypeOf(Segmented_control)).call(this));

		_this.state = {};


		_this.on_key_down = _this.on_key_down.bind(_this);
		return _this;
	}

	// Client side rendering, javascript is enabled


	_createClass(Segmented_control, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var fallback = this.props.fallback;


			if (fallback) {
				this.setState({ javascript: true });
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    disabled = _props.disabled,
			    options = _props.options,
			    fallback = _props.fallback,
			    indicateInvalid = _props.indicateInvalid,
			    error = _props.error,
			    style = _props.style,
			    className = _props.className;


			var markup = React.createElement(
				'div',
				{
					onKeyDown: this.on_key_down,
					className: classNames('rrui__segmented-control', {
						'rrui__rich': fallback,
						'rrui__segmented-control--disabled': disabled
					}, className),
					style: style },
				React.createElement(
					'div',
					{ className: 'rrui__input' },
					options.map(function (option, index) {
						return _this2.render_button(option, index);
					})
				),
				fallback && !this.state.javascript && this.render_static(),
				indicateInvalid && error && React.createElement(
					'div',
					{ className: 'rrui__input-error' },
					error
				)
			);

			return markup;
		}
	}, {
		key: 'render_button',
		value: function render_button(option, index) {
			var _this3 = this;

			var _props2 = this.props,
			    options = _props2.options,
			    value = _props2.value,
			    disabled = _props2.disabled;


			var selected = value === option.value;

			var first = index === 0;
			var last = index === options.length - 1;

			var markup = React.createElement(
				'button',
				{
					key: option.value,
					ref: function ref(_ref) {
						return _this3['button_' + index] = _ref;
					},
					type: 'button',
					tabIndex: index === 0 ? undefined : '-1',
					disabled: disabled,
					onClick: this.chooser(option.value),
					className: classNames('rrui__segmented-control__option', {
						'rrui__segmented-control__option--selected': selected,
						// CSS selector performance optimization
						'rrui__segmented-control__option--disabled': disabled,
						// Ordering
						'rrui__segmented-control__option--first': first,
						'rrui__segmented-control__option--last': last,
						'rrui__segmented-control__option--middle': !first && !last
					}) },
				option.label
			);

			return markup;
		}

		// supports disabled javascript

	}, {
		key: 'render_static',
		value: function render_static() {
			var _this4 = this;

			var options = this.props.options;


			var markup = React.createElement(
				'div',
				{ className: 'rrui__rich__fallback' },
				options.map(function (option, index) {
					return _this4.render_static_option(option, index);
				})
			);

			return markup;
		}
	}, {
		key: 'render_static_option',
		value: function render_static_option(option, index) {
			var _props3 = this.props,
			    options = _props3.options,
			    name = _props3.name,
			    value = _props3.value;


			var first = index === 0;
			var last = index === options.length - 1;

			var markup = React.createElement(
				'span',
				{
					key: option.value,
					className: classNames('rrui__segmented-control__option', {
						'rrui__segmented-control__option--first': first,
						'rrui__segmented-control__option--last': last,
						'rrui__segmented-control__option--middle': !first && !last
					}) },
				React.createElement('input', {
					type: 'radio',
					name: name,
					checked: value === option.value }),
				option.label
			);

			return markup;
		}
	}, {
		key: 'chooser',
		value: function chooser(value) {
			var _this5 = this;

			return function (event) {
				var _props4 = _this5.props,
				    disabled = _props4.disabled,
				    onChange = _props4.onChange;


				if (disabled) {
					return;
				}

				onChange(value);
			};
		}
	}, {
		key: 'focus',
		value: function focus() {
			ReactDOM.findDOMNode(this.button_0).focus();
		}
	}, {
		key: 'on_key_down',
		value: function on_key_down(event) {
			if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
				return;
			}

			var _props5 = this.props,
			    onChange = _props5.onChange,
			    options = _props5.options;


			switch (event.keyCode) {
				// Select the previous option (if present) on left arrow
				case 37:
					event.preventDefault();

					var previous_option_index = this.previous_option_index();

					if (previous_option_index !== undefined) {
						// Focus the option <button/> so that
						// a subsequent "Spacebar" keyDown
						// doesn't select the previously selected
						// option (e.g. the first one)
						this['button_' + previous_option_index].focus();

						// Change the `value`
						return onChange(options[previous_option_index].value);
					}

					return;

				// Select the next option (if present) on right arrow
				case 39:
					event.preventDefault();

					var next_option_index = this.next_option_index();

					if (next_option_index !== undefined) {
						// Focus the option <button/> so that
						// a subsequent "Spacebar" keyDown
						// doesn't select the previously selected
						// option (e.g. the first one)
						this['button_' + next_option_index].focus();

						// Change the `value`
						return onChange(options[next_option_index].value);
					}

					return;
			}
		}

		// Get the previous option index (relative to the currently selected option)

	}, {
		key: 'previous_option_index',
		value: function previous_option_index() {
			var _props6 = this.props,
			    options = _props6.options,
			    value = _props6.value;


			var i = 0;
			while (i < options.length) {
				if (options[i].value === value) {
					if (i - 1 >= 0) {
						return i - 1;
					}
				}
				i++;
			}
		}

		// Get the next option index (relative to the currently selected option)

	}, {
		key: 'next_option_index',
		value: function next_option_index() {
			var _props7 = this.props,
			    options = _props7.options,
			    value = _props7.value;


			var i = 0;
			while (i < options.length) {
				if (options[i].value === value) {
					if (i + 1 < options.length) {
						return i + 1;
					}
				}
				i++;
			}
		}
	}]);

	return Segmented_control;
}(PureComponent);

Segmented_control.propTypes = {
	// A list of selectable options
	options: PropTypes.arrayOf(PropTypes.shape({
		// Option value
		value: PropTypes.string.isRequired,
		// Option label
		label: PropTypes.string.isRequired
	})).isRequired,

	// HTML form input `name` attribute
	name: PropTypes.string,

	// If `true` then will be disabled
	disabled: PropTypes.bool,

	// The selected option value
	value: PropTypes.any,

	// Is called when an option is selected
	onChange: PropTypes.func.isRequired,

	// (exotic use case)
	// Falls back to a plain HTML input
	// when javascript is disabled (e.g. Tor)
	fallback: PropTypes.bool.isRequired,

	// CSS class
	className: PropTypes.string,

	// CSS style object
	style: PropTypes.object
};
Segmented_control.defaultProps = {
	fallback: false
};
export default Segmented_control;
//# sourceMappingURL=SegmentedControl.js.map