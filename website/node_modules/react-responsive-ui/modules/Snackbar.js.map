{"version":3,"sources":["../source/Snackbar.js"],"names":["React","PureComponent","PropTypes","ReactDOM","classNames","Snackbar","state","values","next","props","hideAnimationDuration","minTime","lengthTimeFactor","value","shift","setState","height","undefined","hiding","auto_hide_timer","setTimeout","show","show_next_snack_timeout","duration","content","length","clearTimeout","show_snack_timeout","new_props","reset","push","new_value","findDOMNode","snackbar","offsetHeight","anti_lag_timeout","type","y","container_style","visibility","transform","transition","snackbar_text_style","opacity","overflow","markup","ref","propTypes","oneOfType","string","shape","node","number","func","isRequired","defaultProps"],"mappings":"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","file":"Snackbar.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport classNames from 'classnames'\n\n// Sits at the bottom of a page and displays notifications\nexport default class Snackbar extends PureComponent\n{\n\tstatic propTypes =\n\t{\n\t\t// Snackbar value (either a message, or an object)\n\t\tvalue : PropTypes.oneOfType\n\t\t([\n\t\t\tPropTypes.string,\n\t\t\tPropTypes.shape\n\t\t\t({\n\t\t\t\tcontent  : PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\t\t\t\ttype     : PropTypes.string,\n\t\t\t\tduration : PropTypes.number\n\t\t\t})\n\t\t]),\n\n\t\t// Must reset the `value`.\n\t\treset : PropTypes.func.isRequired,\n\n\t\t// \"Snack\" hiding CSS animation duration.\n\t\t// Is 400 milliseconds by default.\n\t\thideAnimationDuration : PropTypes.number.isRequired,\n\n\t\t// The total display duration (in milliseconds) of a snack\n\t\t// is `minTime + message.length * lengthTimeFactor`\n\t\tminTime          : PropTypes.number.isRequired,\n\t\tlengthTimeFactor : PropTypes.number.isRequired\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\thideAnimationDuration : 400,\n\t\tminTime          : 1200,\n\t\tlengthTimeFactor : 60\n\t}\n\n\tstate =\n\t{\n\t\tvalues: []\n\t}\n\n\tcomponentWillUnmount()\n\t{\n\t\tif (this.auto_hide_timer)\n\t\t{\n\t\t\tclearTimeout(this.auto_hide_timer)\n\t\t\tthis.auto_hide_timer = undefined\n\t\t}\n\n\t\tif (this.show_next_snack_timeout)\n\t\t{\n\t\t\tclearTimeout(this.show_next_snack_timeout)\n\t\t\tthis.show_next_snack_timeout = undefined\n\t\t}\n\n\t\tif (this.show_snack_timeout)\n\t\t{\n\t\t\tclearTimeout(this.show_snack_timeout)\n\t\t\tthis.show_snack_timeout = undefined\n\t\t}\n\t}\n\n\tcomponentWillReceiveProps(new_props)\n\t{\n\t\tlet { value, reset } = new_props\n\n\t\t// Redux has an optimization built in:\n\t\t// it won't rerender a `@connect`ed component\n\t\t// if its new `props` are shallowly equal to the previous ones.\n\t\t// Therefore, manually resetting the `value` property here\n\t\t// immediately after receiving it (a non-`undefined` value)\n\t\t// so that the same notification message could later be displayed.\n\t\tif (value)\n\t\t{\n\t\t\t// Normalize value (make it a plain javascript object)\n\t\t\t// if it's a string or a react element.\n\t\t\tif (!(typeof value === 'object' && !value.props))\n\t\t\t{\n\t\t\t\tvalue = { content: value }\n\t\t\t}\n\n\t\t\t// Add the notification to the queue\n\t\t\tthis.push(value)\n\t\t\t// Reset the `value` property immediately\n\t\t\treset()\n\t\t}\n\t}\n\n\t// Adds a notification to the queue\n\tpush(new_value)\n\t{\n\t\tconst { values, value } = this.state\n\n\t\t// Add the notification to the queue\n\t\tvalues.push(new_value)\n\n\t\t// If the notification queue was empty\n\t\t// then kick-start it.\n\t\tif (!value)\n\t\t{\n\t\t\tthis.next()\n\t\t}\n\t}\n\n\t// Displays the next notification in the queue\n\tnext = () =>\n\t{\n\t\tconst { values } = this.state\n\n\t\tconst\n\t\t{\n\t\t\thideAnimationDuration,\n\t\t\tminTime,\n\t\t\tlengthTimeFactor\n\t\t}\n\t\t= this.props\n\n\t\t// Get the next notification from the queue\n\t\t// (will be `undefined` if the queue is empty)\n\t\tconst value = values.shift()\n\n\t\t// Reset the notification display\n\t\tthis.setState({ value, height: undefined, hiding: false })\n\n\t\t// If the queue is empty, then just exit\n\t\tif (!value)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\t// `state.show` will be set to `true` later,\n\t\t// when the height of the element is measured\n\t\t// (which is after it renders)\n\n\t\t// Hide the notification after it expires\n\t\tthis.auto_hide_timer = setTimeout(() =>\n\t\t{\n\t\t\t// Clearing memory\n\t\t\tthis.auto_hide_timer = undefined\n\n\t\t\t// Start the hiding animation for the notification\n\t\t\tthis.setState({ show: false, hiding: true })\n\n\t\t\t// Display the next notification\n\t\t\t// after the currently being hidden one\n\t\t\t// finishes its hiding animation.\n\t\t\tthis.show_next_snack_timeout = setTimeout(() =>\n\t\t\t{\n\t\t\t\tthis.show_next_snack_timeout = undefined\n\t\t\t\tthis.next()\n\t\t\t},\n\t\t\thideAnimationDuration)\n\t\t},\n\t\t// The total display duration (in milliseconds) of a snack\n\t\t// is `minTime + message.length * lengthTimeFactor`\n\t\tvalue.duration || (minTime + (typeof value.content === 'string' ? value.content.length * lengthTimeFactor : 0)))\n\t}\n\n\tcomponentDidUpdate()\n\t{\n\t\tlet { height, value } = this.state\n\n\t\t// The notification DOM element has just been rendered\n\t\t// which means its dimensions are set by now.\n\t\t// Calculate the notification container DOM element height\n\t\t// so that the slide-from-bottom animation knows\n\t\t// its target Y-position for the CSS `translate` transform.\n\t\tif (height === undefined && value)\n\t\t{\n\t\t\theight = ReactDOM.findDOMNode(this.snackbar).offsetHeight\n\t\t\tconst anti_lag_timeout = 100 // Otherwise it would jump to fully shown in Chrome when there's a queue of snacks waiting to be shown\n\t\t\tthis.setState({ height }, () =>\n\t\t\t{\n\t\t\t\tthis.show_snack_timeout = setTimeout(() =>\n\t\t\t\t{\n\t\t\t\t\tthis.show_snack_timeout = undefined\n\t\t\t\t\tthis.setState({ show: true })\n\t\t\t\t},\n\t\t\t\tanti_lag_timeout)\n\t\t\t})\n\t\t}\n\t}\n\n\trender()\n\t{\n\t\tconst { hideAnimationDuration, type } = this.props\n\t\tconst { show, value, height, hiding } = this.state\n\n\t\tlet y = 0\n\n\t\t// If no snack is being shown,\n\t\t// or if a snack is about to be shown,\n\t\t// then shift it under the screen's bottom border\n\t\t// to show the slide-from-bottom animation at the next step.\n\t\tif (!show && height !== undefined)\n\t\t{\n\t\t\ty = `${height}px`\n\t\t}\n\n\t\tconst container_style =\n\t\t{\n\t\t\tvisibility : show ? 'visible' : 'hidden',\n\t\t\ttransform  : `translateY(${y})`,\n\t\t\ttransition : `transform ${hideAnimationDuration}ms ease-out, visibility ${hideAnimationDuration}ms ease-out`\n\t\t}\n\n\t\tif (!show && !hiding)\n\t\t{\n\t\t\tcontainer_style.transition = 'none'\n\t\t}\n\n\t\tconst snackbar_text_style =\n\t\t{\n\t\t\topacity    : show ? 1 : 0,\n\t\t\ttransition : `opacity ${hideAnimationDuration}ms cubic-bezier(0.23, 1, 0.32, 1) 0ms`,\n\t\t\toverflow   : 'hidden'\n\t\t}\n\n\t\tconst markup =\n\t\t(\n\t\t\t<div\n\t\t\t\tstyle={ container_style }\n\t\t\t\tclassName=\"rrui__snackbar__container\">\n\n\t\t\t\t<div\n\t\t\t\t\tref={ ref => this.snackbar = ref }\n\t\t\t\t\tclassName={ classNames('rrui__snackbar', value && value.type && `rrui__snackbar--${value.type}`) }>\n\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={ snackbar_text_style }\n\t\t\t\t\t\tclassName=\"rrui__snackbar__text\">\n\t\t\t\t\t\t{ value && value.content }\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\n\t\treturn markup\n\t}\n}"]}