{"version":3,"sources":["../source/Checkbox.js"],"names":["React","PureComponent","PropTypes","ReactDOM","classNames","Checkbox","state","toggle","event","target","tagName","toLowerCase","focus","props","disabled","onChange","value","fallback","draw_checkmark","setState","javascript","next_props","was_toggled","path_style","undefined","previous_props","previous_state","error","indicateInvalid","multiline","children","style","className","markup","checkbox","ref","on_focus","on_blur","checkmark_svg_canvas_dimensions","render_checkmark","render_static","window","path","checkmark_svg_path","checkmark_svg_path_style","name","i","path_element","findDOMNode","animation","speed","easing","length","getTotalLength","strokeDasharray","strokeDashoffset","Math","floor","getBoundingClientRect","transition","WebkitTransition","MozTransition","svg_path_style","propTypes","string","bool","isRequired","func","node","object","defaultProps","fill","strokeLinecap","strokeLinejoin"],"mappings":"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","file":"Checkbox.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport classNames from 'classnames'\n\n// http://tympanus.net/codrops/2013/10/15/animated-checkboxes-and-radio-buttons-with-svg/\n\nexport default class Checkbox extends PureComponent\n{\n\tstate = {}\n\n\tstatic propTypes =\n\t{\n\t\t// HTML form field \"name\"\n\t\tname      : PropTypes.string,\n\n\t\t// `true`/`false`\n\t\tvalue     : PropTypes.bool.isRequired,\n\n\t\t// Set to `true` to enable multiline label\n\t\tmultiline : PropTypes.bool.isRequired,\n\n\t\t// Disables the checkbox\n\t\tdisabled  : PropTypes.bool.isRequired,\n\n\t\t// `onChange` handler\n\t\tonChange  : PropTypes.func.isRequired,\n\n\t\t// When `true` autofocuses the checkbox\n\t\tfocus     : PropTypes.bool.isRequired,\n\n\t\t// The label (text)\n\t\tchildren  : PropTypes.node,\n\n\t\t// (exotic use case)\n\t\t// Falls back to a plain HTML input\n\t\t// when javascript is disabled (e.g. Tor)\n\t\tfallback  : PropTypes.bool.isRequired,\n\n\t\t// CSS class\n\t\tclassName : PropTypes.string,\n\n\t\t// CSS style object\n\t\tstyle     : PropTypes.object\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\tdisabled  : false,\n\t\tvalue     : false,\n\t\tfallback  : false,\n\t\tmultiline : false,\n\t\tfocus     : false\n\t}\n\n\t// Client side rendering, javascript is enabled\n\tcomponentDidMount()\n\t{\n\t\tconst { value, fallback } = this.props\n\n\t\tif (value)\n\t\t{\n\t\t\tthis.draw_checkmark()\n\t\t}\n\n\t\tif (fallback)\n\t\t{\n\t\t\tthis.setState({ javascript: true })\n\t\t}\n\t}\n\n\tcomponentWillReceiveProps(next_props)\n\t{\n\t\tif (this.props.value !== next_props.value)\n\t\t{\n\t\t\t// Allows checkmark animation from now on\n\t\t\tthis.was_toggled = true\n\t\t}\n\n\t\tif (this.props.value && !next_props.value)\n\t\t{\n\t\t\tthis.setState({ path_style: undefined })\n\t\t}\n\t}\n\n\tcomponentDidUpdate(previous_props, previous_state)\n\t{\n\t\tif (this.props.value && !previous_props.value)\n\t\t{\n\t\t\tthis.draw_checkmark()\n\t\t}\n\t}\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\tvalue,\n\t\t\terror,\n\t\t\tindicateInvalid,\n\t\t\tmultiline,\n\t\t\tdisabled,\n\t\t\tchildren,\n\t\t\tfallback,\n\t\t\tstyle,\n\t\t\tclassName\n\t\t}\n\t\t= this.props\n\n\t\tconst markup =\n\t\t(\n\t\t\t<div\n\t\t\t\tclassName={ classNames('rrui__checkbox',\n\t\t\t\t{\n\t\t\t\t\t'rrui__rich'               : fallback,\n\t\t\t\t\t'rrui__checkbox--checked'  : value,\n\t\t\t\t\t'rrui__checkbox--invalid'  : indicateInvalid && error,\n\t\t\t\t\t'rrui__checkbox--disabled' : disabled\n\t\t\t\t},\n\t\t\t\tclassName) }\n\t\t\t\tstyle={ style }>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName={ classNames('rrui__input',\n\t\t\t\t\t{\n\t\t\t\t\t\t'rrui__input--multiline' : multiline\n\t\t\t\t\t}) }>\n\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={ classNames('rrui__checkbox__checkbox',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'rrui__checkbox__checkbox--multiline' : multiline\n\t\t\t\t\t\t}) }>\n\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tref={ ref => this.checkbox = ref }\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tchecked={ value }\n\t\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\t\tonChange={ this.toggle }\n\t\t\t\t\t\t\tonFocus={ this.on_focus }\n\t\t\t\t\t\t\tonBlur={ this.on_blur }\n\t\t\t\t\t\t\tclassName=\"rrui__checkbox__input\"/>\n\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={ classNames('rrui__checkbox__box',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'rrui__checkbox__box--no-label' : !children\n\t\t\t\t\t\t\t}) }/>\n\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tviewBox={ checkmark_svg_canvas_dimensions }\n\t\t\t\t\t\t\tclassName=\"rrui__checkbox__checkmark\">\n\t\t\t\t\t\t\t{ value ? this.render_checkmark() : null }\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{ children &&\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\tonClick={ this.toggle }\n\t\t\t\t\t\t\tclassName={ classNames('rrui__checkbox__label',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'rrui__checkbox__label--multiline' : multiline\n\t\t\t\t\t\t\t}) }>\n\t\t\t\t\t\t\t{ children }\n\t\t\t\t\t\t</label>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t\t{ indicateInvalid && error && <div className=\"rrui__input-error\">{ error }</div> }\n\n\t\t\t\t{ fallback && !this.state.javascript && this.render_static() }\n\t\t\t</div>\n\t\t)\n\n\t\treturn markup\n\t}\n\n\trender_checkmark()\n\t{\n\t\tconst { path_style } = this.state\n\n\t\t// For a web browser\n\t\tif (typeof window !== 'undefined')\n\t\t{\n\t\t\treturn <path\n\t\t\t\tref={ ref => this.path = ref }\n\t\t\t\td={ checkmark_svg_path }\n\t\t\t\tstyle={ path_style || checkmark_svg_path_style }/>\n\t\t}\n\n\t\t// For Node.js\n\t\treturn <path\n\t\t\td={ checkmark_svg_path }\n\t\t\tstyle={ checkmark_svg_path_style }/>\n\t}\n\n\t// supports disabled javascript\n\trender_static()\n\t{\n\t\tconst { name, value, focus, disabled, children } = this.props\n\n\t\tconst markup =\n\t\t(\n\t\t\t<div className=\"rrui__rich__fallback\">\n\t\t\t\t{/* This checkbox will be sent as either \"on\" or `undefined` */}\n\t\t\t\t<input\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tname={ name }\n\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\tdefaultChecked={ value }\n\t\t\t\t\tautoFocus={ focus }/>\n\n\t\t\t\t<label className=\"rrui__checkbox__label rrui__checkbox__label--fallback\">\n\t\t\t\t\t{ children }\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t)\n\n\t\treturn markup\n\t}\n\n\tdraw_checkmark()\n\t{\n\t\tconst i = 0\n\n\t\tconst path_element = ReactDOM.findDOMNode(this.path)\n\n\t\tconst animation = { speed : .1, easing : 'ease-in-out' }\n\n\t\tconst path_style = {}\n\n\t\tconst length = path_element.getTotalLength() // in pixels\n\t\tpath_style.strokeDasharray = `${length} ${length}`\n\n\t\tpath_element.style.strokeDashoffset = Math.floor(length) - 1\n\n\t\t// Trigger a layout so styles are calculated & the browser\n\t\t// picks up the starting position before animating\n\t\tpath_element.getBoundingClientRect()\n\n\t\t// Define our transition\n\t\t// (skips the animation on the initial page render on the client side)\n\t\tif (this.was_toggled)\n\t\t{\n\t\t\tpath_style.transition =\n\t\t\tpath_element.style.WebkitTransition =\n\t\t\tpath_element.style.MozTransition =\n\t\t\t\t`stroke-dashoffset ${animation.speed}s ${animation.easing} ${i * animation.speed}s`\n\t\t}\n\n\t\t// Go\n\t\tpath_style.strokeDashoffset = 0\n\n\t\tthis.setState({ path_style: { ...path_style, ...svg_path_style } })\n\t}\n\n\tfocus()\n\t{\n\t\tReactDOM.findDOMNode(this.checkbox).focus()\n\t}\n\n\ttoggle = (event) =>\n\t{\n\t\t// If a link was clicked - don't treat it as a checkbox label click.\n\t\t// (is used for things like \"✓ Read and accepted the <a>licence agreement</a>\")\n\t\tif (event.target.tagName.toLowerCase() === 'a')\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\tthis.focus()\n\n\t\tconst { disabled, onChange, value } = this.props\n\n\t\tif (disabled)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\t// if (value)\n\t\t// {\n\t\t// \tthis.setState({ path_style: undefined })\n\t\t// }\n\n\t\tonChange(!value)\n\t}\n}\n\nconst checkmark_svg_canvas_dimensions = '0 0 100 100'\nconst checkmark_svg_path = ['M16.667,62.167c3.109,5.55,7.217,10.591,10.926,15.75 c2.614,3.636,5.149,7.519,8.161,10.853c-0.046-0.051,1.959,2.414,2.692,2.343c0.895-0.088,6.958-8.511,6.014-7.3 c5.997-7.695,11.68-15.463,16.931-23.696c6.393-10.025,12.235-20.373,18.104-30.707C82.004,24.988,84.802,20.601,87,16']\n\nconst checkmark_svg_path_style =\n{\n\tfill           : 'transparent',\n\tstrokeLinecap  : 'round',\n\tstrokeLinejoin : 'round'\n}\n\nconst svg_path_style =\n{\n\tstrokeLinecap  : 'round',\n\tstrokeLinejoin : 'round',\n\tfill           : 'none'\n}"]}