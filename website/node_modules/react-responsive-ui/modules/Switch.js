import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

// http://wd.dizaina.net/en/experiments/ios7-style-switch/

// An iOS-style switch

var Switch = function (_PureComponent) {
	_inherits(Switch, _PureComponent);

	function Switch() {
		_classCallCheck(this, Switch);

		var _this = _possibleConstructorReturn(this, (Switch.__proto__ || _Object$getPrototypeOf(Switch)).call(this));

		_this.state = {};


		_this.toggle = _this.toggle.bind(_this);
		return _this;
	}

	// Client side rendering, javascript is enabled


	_createClass(Switch, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var fallback = this.props.fallback;


			if (fallback) {
				this.setState({ javascript: true });
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    value = _props.value,
			    fallback = _props.fallback,
			    disabled = _props.disabled,
			    indicateInvalid = _props.indicateInvalid,
			    error = _props.error,
			    style = _props.style,
			    className = _props.className,
			    leftLabel = _props.leftLabel,
			    rightLabel = _props.rightLabel,
			    children = _props.children;


			var markup = React.createElement(
				'label',
				{
					className: classNames('rrui__switch', {
						'rrui__rich': fallback,
						'rrui__input': children,
						'rrui__switch--label': children,
						'rrui__switch--disabled': disabled
					}, className),
					style: style },
				(leftLabel || children) && React.createElement(
					'div',
					{ className: classNames('rrui__switch__label', 'rrui__switch__label--left') },
					leftLabel || children
				),
				React.createElement(
					'div',
					{ className: 'rrui__switch__switch' },
					React.createElement('input', {
						type: 'checkbox',
						value: value,
						onChange: this.toggle,
						style: input_style }),
					React.createElement('div', {
						className: classNames('rrui__switch__groove', {
							// CSS selector performance optimization
							'rrui__switch__groove--on': value
						}) }),
					React.createElement('div', {
						className: classNames('rrui__switch__knob', {
							// CSS selector performance optimization
							'rrui__switch__knob--on': value
						}) })
				),
				rightLabel && React.createElement(
					'div',
					{ className: classNames('rrui__switch__label', 'rrui__switch__label--right') },
					rightLabel
				)
			);

			return markup;
		}

		// supports disabled javascript

	}, {
		key: 'render_static',
		value: function render_static() {
			var _props2 = this.props,
			    name = _props2.name,
			    disabled = _props2.disabled,
			    value = _props2.value;


			var markup = React.createElement(
				'div',
				{ className: 'rrui__rich__fallback' },
				React.createElement('input', {
					type: 'checkbox',
					name: name,
					disabled: disabled,
					value: value })
			);

			return markup;
		}
	}, {
		key: 'toggle',
		value: function toggle(event) {
			var _props3 = this.props,
			    onChange = _props3.onChange,
			    disabled = _props3.disabled,
			    value = _props3.value;


			if (disabled) {
				return;
			}

			onChange(!value);
		}
	}]);

	return Switch;
}(PureComponent);

Switch.propTypes = {
	// HTML form input `name` attribute
	name: PropTypes.string,

	// Disables the switch
	disabled: PropTypes.bool,

	// Either `true` or `false`
	value: PropTypes.bool.isRequired,

	// Is called when the switch is switched
	onChange: PropTypes.func.isRequired,

	// (exotic use case)
	// Falls back to a plain HTML input
	// when javascript is disabled (e.g. Tor)
	fallback: PropTypes.bool.isRequired,

	// The label to the left of the switch
	leftLabel: PropTypes.string,

	// The label to the right of the switch
	rightLabel: PropTypes.string,

	// A label (analogous to `leftLabel`)
	children: PropTypes.node,

	// CSS style object
	style: PropTypes.object,

	// CSS class
	className: PropTypes.string
};
Switch.defaultProps = {
	value: false,
	fallback: false
};
export default Switch;


var input_style = {
	position: 'absolute',
	opacity: 0,
	margin: 0,
	width: '100%',
	height: '100%'
};
//# sourceMappingURL=Switch.js.map