'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _throttle = require('lodash/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _dom = require('./utility/dom');

var _grid = require('./utility/grid');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Text_input = function (_PureComponent) {
	(0, _inherits3.default)(Text_input, _PureComponent);

	function Text_input() {
		var _ref;

		var _temp, _this, _ret;

		(0, _classCallCheck3.default)(this, Text_input);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Text_input.__proto__ || (0, _getPrototypeOf2.default)(Text_input)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.autoresize = function (event) {
			var autoresize = _this.props.autoresize;


			if (!autoresize) {
				return;
			}

			var measurements = _this.measurements();
			var element = event ? event.target : _reactDom2.default.findDOMNode(_this.input);

			element.style.height = 0;

			// `element.scrollHeight` is always an integer
			// so it doesn't need rounding (e.g. `em`s).
			var height = element.scrollHeight + measurements.extra_height;
			height = Math.max(height, measurements.initial_height);

			if ((0, _grid.get_modular_grid_unit)() && height % (0, _grid.get_modular_grid_unit)()) {
				height = Math.ceil(height / (0, _grid.get_modular_grid_unit)()) * (0, _grid.get_modular_grid_unit)();
			}

			element.style.height = height + 'px';
		}, _this.on_window_resize = (0, _throttle2.default)(function (event) {
			_this.autoresize();
		}, 100), _this.on_change = function (event) {
			// Extract `value` from the argument
			// of this `onChange` listener
			// (for convenience)

			var value = event;

			if (event.target !== undefined) {
				value = event.target.value;
			}

			// Call the parent `onChange` handler
			// with the `value` as an argument
			// (for convenience)

			var onChange = _this.props.onChange;


			onChange(value);
		}, _this.on_key_down = function (event) {
			var onKeyDown = _this.props.onKeyDown;

			// Submit the form on Cmd + Enter (or Ctrl + Enter)

			if ((event.ctrlKey || event.metaKey) && event.keyCode === 13) {
				if ((0, _dom.submit_parent_form)(_reactDom2.default.findDOMNode(_this.input))) {
					event.preventDefault();
				}
			}

			if (onKeyDown) {
				onKeyDown(event);
			}
		}, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	}

	(0, _createClass3.default)(Text_input, [{
		key: 'componentDidMount',


		// Client side rendering, javascript is enabled
		value: function componentDidMount() {
			var _props = this.props,
			    multiline = _props.multiline,
			    fallback = _props.fallback,
			    value = _props.value,
			    autoresize = _props.autoresize;

			// Doing `this.measure()` here now
			// because `<textarea/>` should autoresize
			// in case its `value` is set up front.
			// // Not doing `this.measure()` here because
			// // that resulted in weird `<textarea/>` height mismatch.
			// // Measuring the height of `<textarea/>` during
			// // the first `this.measurements()` call instead.

			if (value && autoresize) {
				this.autoresize();
			}

			if (multiline) {
				window.addEventListener('resize', this.on_window_resize);
			}

			if (fallback) {
				this.setState({ javascript: true });
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var multiline = this.props.multiline;


			if (multiline) {
				window.removeEventListener('resize', this.on_window_resize);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _props2 = this.props,
			    id = _props2.id,
			    name = _props2.name,
			    value = _props2.value,
			    placeholder = _props2.placeholder,
			    label = _props2.label,
			    labelStyle = _props2.labelStyle,
			    multiline = _props2.multiline,
			    fallback = _props2.fallback,
			    disabled = _props2.disabled,
			    required = _props2.required,
			    floatingLabel = _props2.floatingLabel,
			    style = _props2.style,
			    className = _props2.className;


			var label_floats = placeholder === undefined && floatingLabel;

			var markup = _react2.default.createElement(
				'div',
				{
					style: style,
					className: (0, _classnames2.default)('rrui__text-input', {
						'rrui__rich': fallback
					}, className) },
				_react2.default.createElement(
					'div',
					{
						className: (0, _classnames2.default)('rrui__input', {
							'rrui__input--multiline': multiline
						}) },
					this.render_input({ name: false }),
					label && _react2.default.createElement(
						'label',
						{
							htmlFor: id,
							className: (0, _classnames2.default)('rrui__input-label', {
								// CSS selector performance optimization
								'rrui__input-label--invalid': this.should_indicate_invalid(),
								'rrui__input-label--floating': label_floats,
								'rrui__input-label--required': required && this.is_empty(),
								'rrui__text-input__label--placeholder': label_floats && this.is_empty()
							}),
							style: labelStyle },
						label
					)
				),
				this.should_indicate_invalid() && this.render_error_message(),
				fallback && !this.state.javascript && this.render_static()
			);

			return markup;
		}
	}, {
		key: 'render_input',
		value: function render_input() {
			var _this2 = this;

			var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
			var placeholder = options.placeholder,
			    ref = options.ref,
			    name = options.name;
			var _props3 = this.props,
			    value = _props3.value,
			    multiline = _props3.multiline,
			    focus = _props3.focus,
			    onChange = _props3.onChange,
			    disabled = _props3.disabled,
			    inputStyle = _props3.inputStyle,
			    rows = _props3.rows,
			    cols = _props3.cols,
			    tabIndex = _props3.tabIndex,
			    autoresize = _props3.autoresize,
			    input = _props3.input,
			    id = _props3.id,
			    onFocus = _props3.onFocus,
			    onBlur = _props3.onBlur;


			var input_style = inputStyle;

			if (multiline && autoresize) {
				input_style = (0, _extends3.default)({
					resize: 'none'
				}, inputStyle);
			}

			var properties = {
				id: id,
				name: name === false ? undefined : this.props.name,
				ref: ref === false ? undefined : function (ref) {
					return _this2.input = ref;
				},
				value: value === undefined || value === null ? '' : value,
				placeholder: placeholder || this.props.placeholder,
				onChange: this.on_change,
				onKeyDown: this.on_key_down,
				onFocus: onFocus,
				onBlur: onBlur,
				disabled: disabled,
				className: (0, _classnames2.default)('rrui__input-element', 'rrui__input-field', 'rrui__text-input__input', {
					'rrui__input-field--invalid': this.should_indicate_invalid(),
					// CSS selector performance optimization
					'rrui__text-input__input--empty': this.is_empty(),
					'rrui__text-input__input--invalid': this.should_indicate_invalid(),
					'rrui__text-input__input--disabled': disabled,
					'rrui__text-input__input--multiline': multiline
				}),
				style: input_style,
				autoFocus: focus,
				tabIndex: tabIndex
			};

			// In case of `multiline` set to `true`
			// this is gonna be a `<textarea/>`
			if (multiline) {
				// "keyup" is required for IE to properly reset height when deleting text
				return _react2.default.createElement('textarea', (0, _extends3.default)({
					rows: rows,
					cols: cols,
					onInput: this.autoresize,
					onKeyUp: this.autoresize
				}, properties));
			}

			// Add `<input/>` `type` to properties
			properties.type = this.get_input_type();

			// If a custom `input` component was passed then use it.
			// Otherwise use a simple `<input/>`.
			return (0, _react.createElement)(input, properties);
		}
	}, {
		key: 'render_error_message',
		value: function render_error_message() {
			var error = this.props.error;


			return _react2.default.createElement(
				'div',
				{ className: 'rrui__input-error' },
				error
			);
		}

		// Fallback in case javascript is disabled (no animated <label/>)

	}, {
		key: 'render_static',
		value: function render_static() {
			var label = this.props.label;


			var markup = _react2.default.createElement(
				'div',
				{ className: 'rrui__rich__fallback' },
				this.render_input({ placeholder: label, ref: false }),
				this.should_indicate_invalid() && this.render_error_message()
			);

			return markup;
		}

		// "text", "email", "password", etc

	}, {
		key: 'get_input_type',
		value: function get_input_type() {
			var _props4 = this.props,
			    type = _props4.type,
			    email = _props4.email,
			    password = _props4.password;


			if (email) {
				return 'email';
			}

			if (password) {
				return 'password';
			}

			return type;
		}

		// Whether the input is empty

	}, {
		key: 'is_empty',
		value: function is_empty() {
			var value = this.props.value;

			// `0` is not an empty value

			if (typeof value === 'number' && value === 0) {
				return false;
			}

			// An empty string, `undefined`, `null` –
			// all those are an empty value.
			if (!value) {
				return true;
			}

			// Whitespace string is also considered empty
			if (typeof value === 'string' && !value.trim()) {
				return true;
			}

			// Not empty
			return false;
		}

		// Whether should indicate that the input value is invalid

	}, {
		key: 'should_indicate_invalid',
		value: function should_indicate_invalid() {
			var _props5 = this.props,
			    indicateInvalid = _props5.indicateInvalid,
			    error = _props5.error;


			return indicateInvalid && error;
		}

		// The underlying `input` component
		// can pass both `event`s and `value`s
		// to this parent `onChange` listener.

	}, {
		key: 'focus',
		value: function focus() {
			var input = this.props.input;

			// For simple DOM nodes like `<input/>`
			// just focus on them.

			if (typeof input === 'string') {
				return _reactDom2.default.findDOMNode(this.input).focus();
			}

			// For custom components call `.focus()` on them
			// (if available)
			return this.input.focus && this.input.focus();
		}
	}, {
		key: 'measure',
		value: function measure() {
			return autoresize_measure(_reactDom2.default.findDOMNode(this.input));
		}
	}, {
		key: 'measurements',
		value: function measurements() {
			var measurements = this.state.autoresize;

			// If it's the first time accessing measurements,
			// or if the textarea was initially hidden
			// (like `display: none` for a mobile-oriented responsive design)
			// then make the initial measurements now.
			if (!measurements || !measurements.initial_height) {
				measurements = this.measure();

				// If the `<textarea/>` is not hidden (e.g. via `display: none`)
				// then keep its initial (minimum) height
				// so that it doesn't shrink below this value
				if (measurements.initial_height) {
					this.setState({ autoresize: measurements });
				}
			}

			return measurements;
		}
	}]);
	return Text_input;
}(_react.PureComponent);

// <textarea/> autoresize (without ghost elements)
// https://github.com/javierjulio/textarea-autosize/blob/master/src/jquery.textarea_autosize.js


Text_input.propTypes = {
	// Text field label
	label: _propTypes2.default.string,

	// HTML form input `name` attribute
	name: _propTypes2.default.string,

	// Text field value
	value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

	// Is called when the `value` is edited
	onChange: _propTypes2.default.func.isRequired,

	// Disables the text field
	disabled: _propTypes2.default.bool,

	// Renders an error message below the `<input/>`
	error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),

	// If this flag is `true` then the `error` is shown.
	// If this flag is `false` then the `error` is not shown (even if passed).
	indicateInvalid: _propTypes2.default.bool,

	// Set to `true` to mark the field as required
	required: _propTypes2.default.bool.isRequired,

	// `<input/>` placeholder
	placeholder: _propTypes2.default.string,

	// Set to `false` to prevent the `<label/>` from floating
	floatingLabel: _propTypes2.default.bool.isRequired,

	// `<textarea/>` instead of an `<input type="text"/>`
	multiline: _propTypes2.default.bool,

	// Sets HTML input `type` attribute to `email`
	email: _propTypes2.default.bool,

	// Sets HTML input `type` attribute to `password`
	password: _propTypes2.default.bool,

	// A manually specified `type` attribute
	type: _propTypes2.default.string.isRequired,

	// Whether `<textarea/>` should autoresize itself
	// (is `true` by default)
	autoresize: _propTypes2.default.bool.isRequired,

	// Autofocuses the input field
	focus: _propTypes2.default.bool,

	// HTML `tabindex` attribute
	tabIndex: _propTypes2.default.number,

	// `<textarea/>` `rows` attribute (row count, i.e. height)
	rows: _propTypes2.default.number,

	// `<textarea/>` `cols` attribute (column count, i.e. width)
	cols: _propTypes2.default.number,

	// A custom `input` component can be passed
	input: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,

	// (exotic use case)
	// Falls back to a plain HTML input
	// when javascript is disabled (e.g. Tor)
	fallback: _propTypes2.default.bool.isRequired,

	// Is called when the input is focused
	onFocus: _propTypes2.default.func,

	// `onKeyDown` event handler
	onKeyDown: _propTypes2.default.func,

	// Is called when the input is blurred
	onBlur: _propTypes2.default.func,

	// CSS style object
	style: _propTypes2.default.object,

	// CSS name
	className: _propTypes2.default.string,

	// CSS style object for `<input/>`
	inputStyle: _propTypes2.default.object,

	// CSS style object for the label
	labelStyle: _propTypes2.default.object
};
Text_input.defaultProps = {
	// HTML input `type` attribute
	type: 'text',

	// `<textarea/>` should autoresize itself
	autoresize: true,

	// Set to `false` to prevent the `<label/>` from floating
	floatingLabel: true,

	// Javascriptless users support (e.g. Tor)
	fallback: false,

	// Set to `true` to mark the field as required
	required: false,

	// Render an `<input/>` by default
	input: 'input'
};
exports.default = Text_input;
function autoresize_measure(element) {
	var style = window.getComputedStyle(element);

	// Borders extra height, because `.scrollHeight` doesn't include borders.
	var extra_height = parseInt(style.borderTopWidth) + parseInt(style.borderBottomWidth);

	// `<textarea/>`'s height is a float when using `em`, `rem`, `pt`, etc.
	var non_rounded_initial_height = element.getBoundingClientRect().height;
	var initial_height = Math.ceil(non_rounded_initial_height);

	// Round the height of `<textarea/>` so that it doesn't jump
	// when autoresizing while typing for the first time.
	if (initial_height !== non_rounded_initial_height) {
		element.style.height = initial_height + 'px';
	}

	return { extra_height: extra_height, initial_height: initial_height };
}
//# sourceMappingURL=TextInput.js.map